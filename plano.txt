FACEIS DE ARRUMAR

BUGFIXES E MAIS URGENTES
- quando existem 2 colunas primary key na tabela o persist fica zuado
- erro no teste unitario se a coluna de login n for de e-mail

SMART TYPE
- se a coluna for "ativo" poder inativa-la e não exibir a linha inativa no listar
- se a coluna for "password" deve fazer sha1 no js e no insert/update; se estiver em branco no update não alterar; nunca incluir no select, validar minimo de 6 chats, não mostrar na lista
- se a coluna for "url" deve validar no persist; no listar, ao clicar deve abrir nova aba
- smartType especifico para colocar NOW() no insert
- ler comentario contendo "martinlabs-generator:ignore" e ignorar coluna

OUTRAS FEATURES
- se a coluna for unique, validar se já existe
- guardar informações sobre colunas nos Models, assim podemos reutilizar e refatorar facilmente (exemplo no fim da pagina)
- organizar o generator para que possamos configurar quais templates irá usar em um outro arquivo
- perguntar se quer rodar o dados.sql
- rodar mvn
- graficos valor x hora
- exportar csv via client
- exportar csv total via servidor
- gerar watch no grunt

EXISTE IMPEDIMENTO OU PRECISA SER PENSADO MELHOR
- generator Android/iOS (model e listar)
- em todos os WS além de token tem que enviar versão do client para validar se é muito antiga e sistema operacional
- gerar "esqueci a senha"
- lista de itens conectados ao meu usuário
- poder alterar "minha conta"
- gerar create.sql




Guardar informações sobre colunas nos Models, assim podemos reutilizar e refatorar facilmente:

public Carga getCarga(long id){
    return selectOne("SELECT * "
        + "FROM carga "
        + "INNER JOIN carga_destinatario "
        + "ON carga.idCargaPk = carga_destinatario.idCargaFk "
        + "INNER JOIN destinatario AS d "
        + "ON d.idDestinatarioPk = carga_destinatario.idDestinatarioFk "
        + "WHERE carga.idCargaPk = ? ", 
    rs -> {
        Carga carga = Carga.buildAll(rs); //não precisa passar "carga" pq é o default
        carga.setDestinatario(Destinatario.buildApresentacao(rs, "d")); //passando "d" como alias, o default seria "destinatario"
        return carga;
    }, id);
}

public void insertCarga(Carga carga){
    return update("INSERT INTO carga ("
        + colsInsert(Carga.COLUMNS_INSERT_ALL)
        + ") "
        + "VALUES "
        + generateInsertCommas(1, Carga.COLUMNS_INSERT_ALL.length),
        carga.getDataInsertAll());
}

public void updateCarga(Carga carga){
    return update("UPDATE carga SET "
        + colsUpdate(Carga.COLUMNS_UPDATE_ALL)
        + "WHERE idCargaPk = ? ",
        carga.getDataUpdateAllWith(carga.getIdCargaPk()));
}