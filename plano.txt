BUG TRIVIAL
- existe a suspeita que o computed do vue deu bug uma vez (dataRendered)
- erro no teste unitario se a coluna de login n for de e-mail

FEATURES
- colocar input groups do vue em outro component para que possamos trocar o estilo de todos facilmente
- validar no JS tb
- identificar constantes e colocar em variáveis estaticas e usa-las, no JS tb
- usar nwjs para dar mais opções de input e gerar algo mais preciso
- Usar @NotNull e @Nullable
- gerar create.sql
- perguntar se quer rodar o dados.sql
- rodar mvn
- colocar colunas de insert/update no model (exemplo abaixo)

EXISTE IMPEDIMENTO OU PRECISA SER PENSADO MELHOR
- o usuário poder escolher tabelas para fazer join e where com campos obrigatorios e opcionais
- o usuário poder escolher tabelas para fazer persist ao mesmo tempo
- generator Android/iOS (pelo menos estrutura e process)
- lista de itens conectados ao meu usuário
- poder alterar "minha conta"
- exportar csv total via servidor
- organizar o generator para que possamos configurar em um arquivo externo os templates que irá usar
- enviar versão do app no header da requisição

>>>>> COLUNAS NO MODEL DE UPDATE NO MODEL

public class PrincipalDao extends DaoWrapper {
    
    public int update(Principal principal){
        return updateWithMap("principal", 
                principal.toUpdateMap(), 
                "WHERE idPrincipalPk = ? ",
                principal.getIdPrincipalPk()).affectedRows;
    }
    
    public long insert(Principal principal){
        return insertWithMap("principal", 
                principal.toInsertMap()).key;
    }


}

===============================================

public class Principal {
    
    public Map<String, Object> toMap() {
        return new HashMap<String, Object>() {
            {
                put("idPrincipalPk", getIdPrincipalPk());
                put("idGrupoDoPrincipalFk", getIdGrupoDoPrincipalFk());
                put("idGrupoDoPrincipalFacultativoFk", getIdGrupoDoPrincipalFacultativoFk());
                put("textoObrigatorio", getTextoObrigatorio());
                put("textoFacultativo", getTextoFacultativo());
                put("decimalObrigatorio", getDecimalObrigatorio());
                put("decimalFacultativo", getDecimalFacultativo());
                put("inteiroObrigatorio", getInteiroObrigatorio());
                put("inteiroFacultativo", getInteiroFacultativo());
                put("booleanoObrigatorio", getBooleanoObrigatorio());
                put("booleanoFacultativo", getBooleanoFacultativo());
                put("dataObrigatoria", getDataObrigatoria());
                put("dataFacultativa", getDataFacultativa());
                put("datahoraObrigatoria", getDatahoraObrigatoria());
                put("datahoraFacultativa", getDatahoraFacultativa());
                put("ativo", getAtivo());
                put("email", getEmail());
                put("senha", getSenha());
                put("urlImagem", getUrlImagem());
                put("url", getUrl());
            }
        };
    }
    
    public Map<String, Object> toInsertMap() {
        Map<String, Object> map = toMap();
        map.remove("idPrincipalPk");
        return map;
    }
    
    public Map<String, Object> toUpdateMap() {
        return toInsertMap();
    }
    
}
