PRIORIDADE
- formatar data no GET (pedir pro koba ver aquela parada do timezone)
- colocar input groups do vue em outro component para que possamos trocar o estilo de todos facilmente
- validar rg, cep, telefone
- ao informar url colocar http:// se não tiver ://
- usar nwjs para dar mais opções de input e gerar algo mais preciso
- bug: não salva package.json pq tá tentando instalar npm antes disso
- mostrar total de entradas no list
- autocomplete de endereço
- model em obj-c
- remover construtor que clona, ngm vai usar e ficar atualizando é inviavel, pode trazer problemas (teste unitario usa esse construtor)

BUG TRIVIAL
- incluir no BD do usecase um campo de texto com mais de 255 chars para virar um textarea
- package.json n foi gerado da primeira vez (com a pasta totalmente vazia)
- existe a suspeita que o computed do vue deu bug uma vez (dataRendered)
- erro no teste unitario se a coluna de login n for de e-mail
- mysql bigint -> long; mysql int -> int;   -   é realmente necessário? vai dar mto trabalho (ids long)

FEATURES
- validar no JS tb
- identificar constantes e colocar em variáveis estaticas e usa-las, no JS tb
- Usar @NotNull e @Nullable
- gerar create.sql
- perguntar se quer rodar o dados.sql
- rodar mvn
- colocar colunas de insert/update no model (exemplo abaixo)
- data futuro/passado (comentario na coluna)

EXISTE IMPEDIMENTO OU PRECISA SER PENSADO MELHOR
- smarttype: dinheiro
- o usuário poder escolher tabelas para fazer join e where com campos obrigatorios e opcionais
- o usuário poder escolher tabelas para fazer persist ao mesmo tempo
- lista de itens conectados ao meu usuário
- generator Android/iOS (pelo menos estrutura e process)
- poder alterar "minha conta"
- exportar csv total via servidor
- organizar o generator para que possamos configurar em um arquivo externo os templates que irá usar
- enviar versão do app no header da requisição







tipos de input para criar components

    input
        required ou não (boolean)
        label (string)
        v-model (obj)
        type (string) (fazer coisas diferentes dependendo)
        step (int)
        placeholder (string)

    textarea
        required ou não (boolean)
        label (string)
        v-model (obj)
        type (text)
        step (int)
        placeholder (string)

    datefield
        required ou não (boolean)
        label (string)
        v-model (obj)
        withtime (boolean)

    select
        required ou não (boolean)
        label (string)
        v-model (obj)
        slot pra options

    option
        label (string)
        value
        slot pra nome

    checkbox
        v-model (obj)
        label (string)










>>>>> COLUNAS NO MODEL DE UPDATE NO MODEL

public class PrincipalDao extends DaoWrapper {
    
    public int update(Principal principal){
        return updateWithMap("principal", 
                principal.toUpdateMap(), 
                "WHERE idPrincipalPk = ? ",
                principal.getIdPrincipalPk()).affectedRows;
    }
    
    public long insert(Principal principal){
        return insertWithMap("principal", 
                principal.toInsertMap()).key;
    }


}

===============================================

public class Principal {
    
    public Map<String, Object> toMap() {
        return new HashMap<String, Object>() {
            {
                put("idPrincipalPk", getIdPrincipalPk());
                put("idGrupoDoPrincipalFk", getIdGrupoDoPrincipalFk());
                put("idGrupoDoPrincipalFacultativoFk", getIdGrupoDoPrincipalFacultativoFk());
                put("textoObrigatorio", getTextoObrigatorio());
                put("textoFacultativo", getTextoFacultativo());
                put("decimalObrigatorio", getDecimalObrigatorio());
                put("decimalFacultativo", getDecimalFacultativo());
                put("inteiroObrigatorio", getInteiroObrigatorio());
                put("inteiroFacultativo", getInteiroFacultativo());
                put("booleanoObrigatorio", getBooleanoObrigatorio());
                put("booleanoFacultativo", getBooleanoFacultativo());
                put("dataObrigatoria", getDataObrigatoria());
                put("dataFacultativa", getDataFacultativa());
                put("datahoraObrigatoria", getDatahoraObrigatoria());
                put("datahoraFacultativa", getDatahoraFacultativa());
                put("ativo", getAtivo());
                put("email", getEmail());
                put("senha", getSenha());
                put("urlImagem", getUrlImagem());
                put("url", getUrl());
            }
        };
    }
    
    public Map<String, Object> toInsertMap() {
        Map<String, Object> map = toMap();
        map.remove("idPrincipalPk");
        return map;
    }
    
    public Map<String, Object> toUpdateMap() {
        return toInsertMap();
    }
    
}
